//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc};
use chrono::serde::{ts_milliseconds, ts_milliseconds_option};

pub fn default_task_completed_state() -> bool {
    false
}

pub fn default_dealine() -> Option<DateTime<Utc>> {
    Option::None
}

fn get_current_time() -> DateTime<Utc> {
    chrono::Utc::now()
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "task")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: Uuid,

    pub title: String,

    #[serde(default = "default_task_completed_state")]
    pub completed: bool,

    #[serde(
        rename = "createdAt",
        default = "get_current_time",
        with = "ts_milliseconds"
    )]
    pub created_at: DateTime<Utc>,
    
    #[serde(
        skip_serializing_if = "Option::is_none",
        with = "ts_milliseconds_option",
        default = "default_dealine"
    )]
    pub deadline: Option<DateTime<Utc>>,
}

impl Model {
    pub fn new(title: String, completed: bool, deadline: Option<DateTime<Utc>>) -> Self {
        Model {
            id: Uuid::new_v4(),
            title,
            completed,
            created_at: Utc::now(),
            deadline,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
